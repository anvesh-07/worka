// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  applications  Application[] // New relation to applications

  onboardingCompleted Boolean   @default(false)
  userType            UserType?
  stripeCustomerId    String?   @unique

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Company      Company?
  JobSeeker    JobSeeker?
  SavedJobPost SavedJobPost[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserType {
  COMPANY
  JOB_SEEKER
}

model Company {
  id       String  @id @default(uuid())
  name     String
  location String
  logo     String
  website  String
  xAccount String?
  about    String
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  JobPost   JobPost[]
}

model JobSeeker {
  id     String @id @default(uuid())
  name   String
  about  String
  resume String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JobPost {
  id              String        @id @default(uuid())
  jobTitle        String
  employmentType  String
  location        String
  salaryFrom      Int
  salaryTo        Int
  jobDescription  String
  listingDuration Int
  benefits        String[]
  status          JobPostStatus @default(DRAFT)
  applications    Application[] // Updated to relation
  company         Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SavedJobPost SavedJobPost[]
}

enum JobPostStatus {
  DRAFT
  ACTIVE
  EXPIRED
}

model SavedJobPost {
  id     String @id @default(uuid())
  jobId  String
  userId String

  job  JobPost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, jobId])
}

model Application {
  id             String            @id @default(cuid())
  jobId          String
  userId         String
  resume         String?
  coverLetter    String?
  expectedSalary Int
  noticePeriod   NoticePeriod
  relocation     Boolean           @default(false)
  skills         String[]
  status         ApplicationStatus @default(SUBMITTED)
  appliedAt      DateTime          @default(now())

  job  JobPost @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}

enum NoticePeriod {
  IMMEDIATE
  FIFTEEN_DAYS
  ONE_MONTH
  TWO_MONTHS
  MORE_THAN_TWO_MONTHS
}

enum ApplicationStatus {
  SUBMITTED
  VIEWED
  INTERVIEWING
  OFFERED
  REJECTED
}
